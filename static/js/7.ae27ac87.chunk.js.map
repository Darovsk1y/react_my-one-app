{"version":3,"sources":["utils/validators/validators.js","components/global/FormControls/FormControls.jsx","components/global/FormControls/FormControls.module.css","components/Login/Login.module.css","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControls","Element","input","meta","props","hasError","touched","error","className","s","controls","errMessage","module","exports","Input","maxLength30","LoginFormRedux","reduxForm","form","onSubmit","handleSubmit","line","Field","component","name","validate","placeholder","autoFocus","type","checkboxBlok","checkbox","formError","button","LoginContainer","formData","isAuth","authLoginThunk","email","password","rememberMe","this","to","title","Login","React","Component","LoginConnect","connect","state","auth"],"mappings":"gHAAA,oEACO,IAAMA,EAAW,SAAAC,GACvB,IAAGA,EACH,MAAO,qBAEKC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC/C,OAAGA,EAAMG,OAASD,EAAiB,yBAAN,OAAgCA,EAAhC,iBACxB,K,mICLOE,EAAe,SAAAC,GAAO,OAAI,YAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,iBAC7DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACC,sBAAKC,UAAWC,IAAEC,SAAU,KAAML,EAAWI,IAAEF,MAAQ,IAAvD,UACC,cAACN,EAAD,2BAAaG,GAAWF,IACvBG,GAAY,qBAAKG,UAAWC,IAAEE,WAAlB,SAA+BR,EAAKI,c,oBCNpDK,EAAOC,QAAU,CAAC,SAAW,+BAA+B,MAAQ,4BAA4B,WAAa,mC,oBCA7GD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,KAAO,oBAAoB,aAAe,4BAA4B,SAAW,wBAAwB,OAAS,sBAAsB,UAAY,2B,yICKxNC,EAAQd,YAAa,SAEvBe,EAAclB,YAAiB,IA+BpBmB,EAJQC,YAAU,CAE/BC,KAAM,SAFeD,EA1BL,SAACb,GAClB,OAAO,uBAAMI,UAAWC,IAAES,KAAMC,SAAUf,EAAMgB,aAAzC,UACN,qBAAKZ,UAAWC,IAAEY,KAAlB,SACC,cAACC,EAAA,EAAD,CAAOC,UAAWT,EAAOU,KAAM,QAASC,SAAU,CAAC9B,IAAUoB,GAAcW,YAAY,QAAQC,WAAW,MAE3G,qBAAKnB,UAAWC,IAAEY,KAAlB,SACC,cAACC,EAAA,EAAD,CAAOC,UAAWT,EAAOU,KAAM,WAAYC,SAAU,CAAC9B,IAAUoB,GAAcW,YAAY,WAAWE,KAAK,eAE3G,qBAAKpB,UAAWC,IAAEY,KAAlB,SACC,wBAAOb,UAAWC,IAAEoB,aAApB,UACC,cAACP,EAAA,EAAD,CAAOC,UAAW,QAASC,KAAM,aAAchB,UAAWC,IAAEqB,SAAUF,KAAK,aAC3E,wHAGDxB,EAAMG,MACP,8BACC,qBAAKC,UAAWC,IAAEsB,UAAlB,SACE3B,EAAMG,UAGN,GAGH,wBAAQC,UAAWC,IAAEuB,OAArB,yB,uCCxBIC,E,4MACLd,SAAW,SAACe,IACc,IAAtB,EAAK9B,MAAM+B,QACb,EAAK/B,MAAMgC,eAAeF,EAASG,MAAOH,EAASI,SAAUJ,EAASK,a,4CAIvE,WACD,OAAGC,KAAKpC,MAAM+B,OAAe,cAAC,IAAD,CAAUM,GAAI,aAEtC,sBAAKjC,UAAU,QAAf,UACE,oBAAIA,UAAWC,IAAEiC,MAAjB,mBACA,cAACC,EAAD,CAAgBxB,SAAUqB,KAAKrB,kB,GAZVyB,IAAMC,WAoB7BC,EAAeC,aAHG,SAACC,GAAD,MAAY,CACnCb,OAAQa,EAAMC,KAAKd,UAE4B,CAACC,oBAA5BW,CAA6Cd,GAEnDa","file":"static/js/7.ae27ac87.chunk.js","sourcesContent":["/* Проверка на заполненность поля */\r\nexport const required = value =>{\r\n\tif(value) return undefined;\r\n\treturn \"field is required\";\r\n}\r\nexport const maxLengthCreator = (maxLength) => (value) =>{\r\n\tif(value.length > maxLength) return `Max lenght message is ${maxLength} simbols`\r\n\telse return\r\n}","import s from \"./FormControls.module.css\";\r\n/* Создадим универсальную кампаненту HOC в которую будет предедаваться Element т.е \"input\" и т.п.*/\r\nexport const FormControls = Element => ({input, meta, ...props}) => {\r\n\tconst hasError = meta.touched && meta.error;\r\n\treturn (\r\n\t\t<div className={s.controls +\" \"+ (hasError ? s.error : \"\")}>\r\n\t\t\t<Element {...props} {...input}></Element>\r\n\t\t\t{hasError && <div className={s.errMessage}>{meta.error}</div>}\r\n\t\t</div>\r\n\t)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"FormControls_controls__p4CCh\",\"error\":\"FormControls_error__sUN7x\",\"errMessage\":\"FormControls_errMessage__2Pt9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Login_title__2O1CX\",\"form\":\"Login_form__2VCNh\",\"line\":\"Login_line__FknqJ\",\"checkboxBlok\":\"Login_checkboxBlok__w6vg7\",\"checkbox\":\"Login_checkbox__Sb46P\",\"button\":\"Login_button__3IcNC\",\"formError\":\"Login_formError__3YkP4\"};","import s from \"./Login.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { FormControls } from \"../global/FormControls/FormControls\";\r\nimport { maxLengthCreator } from \"../../utils/validators/validators\";\r\nimport { required } from './../../utils/validators/validators';\r\n\r\nconst Input = FormControls(\"input\");\r\n\r\nlet maxLength30 = maxLengthCreator(30);\r\nconst LoginForm = (props) =>{\r\n\treturn <form className={s.form} onSubmit={props.handleSubmit}>\r\n\t\t<div className={s.line}>\r\n\t\t\t<Field component={Input} name={\"email\"} validate={[required, maxLength30]} placeholder=\"login\" autoFocus={true}/>\r\n\t\t</div>\r\n\t\t<div className={s.line}>\r\n\t\t\t<Field component={Input} name={\"password\"} validate={[required, maxLength30]} placeholder=\"password\" type=\"password\"/>\r\n\t\t</div>\r\n\t\t<div className={s.line}>\r\n\t\t\t<label className={s.checkboxBlok}>\r\n\t\t\t\t<Field component={\"input\"} name={\"rememberMe\"} className={s.checkbox} type=\"checkbox\"/>\r\n\t\t\t\t<span >запомнить меня</span>\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t\t{props.error ? \r\n\t\t<div>\r\n\t\t\t<div className={s.formError}>\r\n\t\t\t\t{props.error}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t : \"\"\r\n\t\t}\r\n\t\t\r\n\t\t<button className={s.button}>Login</button>\r\n\t</form>\r\n}\r\nconst LoginFormRedux = reduxForm({\r\n\t// a unique name for the form\r\n  form: 'login'\r\n})(LoginForm)\r\nexport default LoginFormRedux;","import s from \"./Login.module.css\";\r\nimport LoginFormRedux from \"./Login\";\r\nimport React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { authLoginThunk } from './../../redux/auth_reducer';\r\nimport { Navigate } from \"react-router-dom\";\r\n/* Используем устаревшую билиотеку Redux-form для практики */\r\n\r\nclass LoginContainer extends React.Component {\r\n\tonSubmit = (formData) => {\r\n\t\tif(this.props.isAuth === false){\r\n\t\t\tthis.props.authLoginThunk(formData.email, formData.password, formData.rememberMe);\r\n\t\t}\r\n\t}\r\n\t\r\n  render() {\r\n\tif(this.props.isAuth) return <Navigate to={\"/profile\"}/>\r\n    return (\r\n      <div className=\"login\">\r\n        <h3 className={s.title}>Login</h3>\r\n        <LoginFormRedux onSubmit={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nlet mapDispathToProps = (state) => ({\r\n\tisAuth: state.auth.isAuth,\r\n})\r\nconst LoginConnect = connect(mapDispathToProps, {authLoginThunk})(LoginContainer);\r\n\r\nexport default LoginConnect;\r\n"],"sourceRoot":""}